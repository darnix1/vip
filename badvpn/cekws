#!/usr/bin/python3
import os
import re
import subprocess
import json
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.box import SIMPLE
from rich.style import Style
from datetime import datetime
import time

# Configuración
XRAY_CONFIG = "/etc/xray/config.json"
ACCESS_LOG = "/var/log/xray/access.log"
REFRESH_SECONDS = 3

console = Console()

def debug_log(message):
    """Función para depuración"""
    with open("/tmp/vmess_debug.log", "a") as f:
        f.write(f"{datetime.now()}: {message}\n")

def get_vmess_users():
    """Obtiene usuarios VMESS del archivo de configuración"""
    debug_log("Leyendo usuarios VMESS...")
    try:
        with open(XRAY_CONFIG, "r") as f:
            content = f.read()
            debug_log(f"Contenido del archivo (primeras 200 líneas):\n{content[:2000]}...")
            
        users = re.findall(r'#vmg\s+(\S+)', content)
        debug_log(f"Usuarios encontrados: {users}")
        return users
    except Exception as e:
        debug_log(f"Error al leer usuarios: {str(e)}")
        return []

def get_active_connections(vm_users):
    """Obtiene conexiones activas desde el log"""
    debug_log("Buscando conexiones activas...")
    active_users = set()
    
    try:
        # Leer las últimas 100 líneas del log
        with open(ACCESS_LOG, "r") as f:
            lines = f.readlines()[-100:]
            debug_log(f"Total de líneas leídas: {len(lines)}")
        
        for line in lines:
            if "email:" not in line:
                continue
                
            try:
                # Extraer componentes de la línea de log
                parts = line.split()
                time_str = parts[1]
                ip = parts[2]
                user = parts[6].split("email:")[1].strip()
                
                if user not in vm_users:
                    continue
                    
                # Calcular tiempo desde la conexión
                now = datetime.now()
                log_time = datetime.strptime(time_str, "%H:%M:%S")
                delta = now - datetime.combine(now.date(), log_time.time())
                
                if delta.total_seconds() < 40:
                    clean_ip = re.sub(r"tcp://|udp://", "", ip).split(":")[0]
                    active_users.add((user, clean_ip))
                    debug_log(f"Conexión activa encontrada: {user} desde {clean_ip}")
            except Exception as e:
                debug_log(f"Error al procesar línea: {line.strip()} - {str(e)}")
                
    except Exception as e:
        debug_log(f"Error al leer logs: {str(e)}")
    
    return active_users

def get_user_stats(user):
    """Obtiene estadísticas del usuario"""
    try:
        with open(f"/etc/limit/vmess/{user}", "r") as f:
            usage = int(f.read().strip())
    except:
        usage = 0
        
    try:
        with open(f"/etc/vmess/{user}", "r") as f:
            limit = int(f.read().strip())
    except:
        limit = 0
        
    return usage, limit

def human_bytes(size):
    """Formatea bytes en unidades legibles"""
    units = ['B', 'KB', 'MB', 'GB']
    for unit in units:
        if size < 1024:
            return f"{size:.2f} {unit}"
        size /= 1024
    return f"{size:.2f} TB"

def display_stats():
    """Muestra estadísticas en tiempo real"""
    try:
        while True:
            # Obtener datos
            vm_users = get_vmess_users()
            active_conns = get_active_connections(vm_users)
            
            # Procesar conexiones activas
            user_stats = {}
            for user, ip in active_conns:
                if user not in user_stats:
                    user_stats[user] = {'ips': set(), 'count': 0}
                user_stats[user]['ips'].add(ip)
                user_stats[user]['count'] += 1
            
            # Limpiar pantalla y mostrar encabezado
            os.system('clear')
            console.print(Panel("[bold cyan]• VMESS USER MONITOR •[/bold cyan]", 
                             style="cyan", box=SIMPLE))
            
            # Crear tabla
            table = Table(box=SIMPLE, show_header=True, 
                         header_style=Style(bold=True, color="blue"))
            table.add_column("Usuario", style="cyan")
            table.add_column("Conexiones", justify="center")
            table.add_column("IPs", style="dim")
            table.add_column("Uso", justify="right")
            table.add_column("Límite", justify="right")
            table.add_column("Disponible", justify="right")
            
            # Agregar datos a la tabla
            if user_stats:
                for user, data in user_stats.items():
                    usage, limit = get_user_stats(user)
                    remaining = max(0, limit - usage) if limit > 0 else 0
                    
                    table.add_row(
                        user,
                        str(data['count']),
                        ", ".join(data['ips']),
                        human_bytes(usage),
                        human_bytes(limit) if limit > 0 else "∞",
                        human_bytes(remaining) if limit > 0 else "∞"
                    )
                console.print(table)
            else:
                console.print("[yellow]No hay usuarios VMESS activos[/yellow]")
                
            console.print(f"\n[dim]Actualizado: {datetime.now().strftime('%H:%M:%S')} | "
                         f"Usuarios configurados: {len(vm_users)}[/dim]")
            
            time.sleep(REFRESH_SECONDS)
            
    except KeyboardInterrupt:
        console.print("\n[bold yellow]Monitor detenido[/bold yellow]")
    except Exception as e:
        console.print(f"[red]Error crítico: {str(e)}[/red]")

if __name__ == "__main__":
    # Verificar permisos y archivos
    checks = [
        (XRAY_CONFIG, "Archivo de configuración de Xray"),
        (ACCESS_LOG, "Archivo de logs de acceso"),
        ("/etc/limit/vmess/", "Directorio de límites"),
        ("/etc/vmess/", "Directorio de configuración VMESS")
    ]
    
    all_ok = True
    for path, desc in checks:
        if not os.path.exists(path):
            console.print(f"[red]Error: No se encuentra {desc} en {path}[/red]")
            all_ok = False
    
    if all_ok:
        console.print("[green]Iniciando monitor de usuarios VMESS...[/green]")
        console.print("Presiona Ctrl+C para salir\n")
        display_stats()
    else:
        console.print("\n[red]Corrige los problemas antes de ejecutar el monitor[/red]")
