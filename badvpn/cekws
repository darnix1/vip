#!/usr/bin/python3
import os
import re
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.box import SIMPLE
from datetime import datetime
import time
from collections import defaultdict

# Inicializar Rich Console
console = Console()

# Función tim2sec (conversión de tiempo a segundos)
def tim2sec(time_str):
    parts = list(map(int, time_str.split(":")))
    seconds = 0
    for i, part in enumerate(reversed(parts)):
        seconds += part * (60 ** i)
    return seconds

# Función convert (conversión de bytes a KB, MB, GB)
def convert(bytes):
    if bytes < 1024:
        return f"{bytes} B"
    elif bytes < 1048576:
        return f"{(bytes + 1023) // 1024} KB"
    elif bytes < 1073741824:
        return f"{(bytes + 1048575) // 1048576} MB"
    else:
        return f"{(bytes + 1073741823) // 1073741824} GB"

# Función para leer usuarios VMESS
def get_vmess_users():
    vm_users = []
    try:
        with open("/etc/xray/config.json", "r") as config_file:
            for line in config_file:
                match = re.search(r"^#vmg\s+(\S+)", line)
                if match:
                    vm_users.append(match.group(1))
    except FileNotFoundError:
        console.print("[bold red]Error: No se encontró el archivo de configuración[/bold red]")
    return vm_users

# Función para obtener usuarios activos
def get_active_users(vm_users):
    active_users = defaultdict(int)
    try:
        with open("/var/log/xray/access.log", "r") as log_file:
            log_lines = log_file.readlines()[-200:]  # Leer las últimas 200 líneas
            
        for line in log_lines:
            for vmuser in vm_users:
                if f"email: {vmuser}" in line:
                    parts = line.split()
                    if len(parts) >= 7:
                        ina, inu, anu = parts[6], parts[1], parts[2]
                        enu = re.sub(r"tcp://", "", anu).split(".")[0:3]
                        enu = ".".join(enu)

                        now = tim2sec(datetime.now().strftime("%H:%M:%S"))
                        client = tim2sec(inu)
                        nowt = now - client

                        if nowt < 40:
                            active_users[vmuser] += 1
    except FileNotFoundError:
        console.print("[bold red]Error: No se encontró el archivo de log[/bold red]")
    return active_users

# Función para mostrar la tabla
def display_table(active_users, vm_users):
    # Crear tabla para mostrar usuarios activos
    table = Table(title="Usuarios VMESS Activos", box=SIMPLE, show_lines=True)
    table.add_column("Usuario", style="cyan", justify="center")
    table.add_column("Conexiones", style="magenta", justify="center")
    table.add_column("Uso de Datos", style="green", justify="center")
    table.add_column("Límite", style="yellow", justify="center")

    # Mostrar información de usuarios activos
    if active_users:
        for vmuser in vm_users:
            if vmuser in active_users:
                try:
                    # Leer uso de datos
                    with open(f"/etc/limit/vmess/{vmuser}", "r") as usage_file:
                        byt = int(usage_file.read().strip())
                    gb = convert(byt)

                    # Leer límite
                    with open(f"/etc/vmess/{vmuser}", "r") as limit_file:
                        lim = int(limit_file.read().strip())
                    lim2 = convert(lim)

                    table.add_row(vmuser, str(active_users[vmuser]), gb, lim2)
                except FileNotFoundError:
                    table.add_row(vmuser, str(active_users[vmuser]), "N/A", "N/A")

        # Limpiar y mostrar la tabla
        console.clear()
        console.print(Panel("[bold cyan]• VMESS USER ONLINE •[/bold cyan]", style="cyan", box=SIMPLE))
        console.print(table)
    else:
        console.clear()
        console.print(Panel("[bold cyan]• VMESS USER ONLINE •[/bold cyan]", style="cyan", box=SIMPLE))
        console.print("[bold red]No hay usuarios VMESS activos.[/bold red]")

# Función principal
def main():
    vm_users = get_vmess_users()
    if not vm_users:
        console.print("[bold red]No se encontraron usuarios VMESS[/bold red]")
        return

    try:
        while True:
            active_users = get_active_users(vm_users)
            display_table(active_users, vm_users)
            time.sleep(2)  # Espera 2 segundos antes de actualizar
    except KeyboardInterrupt:
        console.print("\n[bold yellow]Deteniendo el monitoreo...[/bold yellow]")

if __name__ == "__main__":
    main()
