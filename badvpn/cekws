#!/usr/bin/python3
import os
import re
import pandas as pd
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.box import SIMPLE
from rich.live import Live
from datetime import datetime
import time
import threading

# Inicializar Rich Console
console = Console()

# Función tim2sec (conversión de tiempo a segundos)
def tim2sec(time_str):
    parts = list(map(int, time_str.split(":")))
    seconds = 0
    for i, part in enumerate(reversed(parts)):
        seconds += part * (60 ** i)
    return seconds

# Función convert (conversión de bytes a KB, MB, GB)
def convert(bytes):
    if bytes < 1024:
        return f"{bytes} B"
    elif bytes < 1048576:
        return f"{(bytes + 1023) // 1024} KB"
    elif bytes < 1073741824:
        return f"{(bytes + 1048575) // 1048576} MB"
    else:
        return f"{(bytes + 1073741823) // 1073741824} GB"

# Función tail (leer las últimas n líneas de un archivo)
def tail(file_path, n=100):
    with open(file_path, "r") as f:
        return f.readlines()[-n:]

# Función cek_vmess (verificación de usuarios VMESS activos)
def cek_vmess():
    # Leer usuarios VMESS del archivo de configuración
    vm_users = []
    with open("/etc/xray/config.json", "r") as config_file:
        for line in config_file:
            match = re.search(r"^#vmg\s+(\S+)", line)
            if match:
                vm_users.append(match.group(1))

    # Crear un DataFrame vacío para almacenar los datos
    columns = ["Usuario", "IP Login", "Uso de Datos", "Límite"]
    df = pd.DataFrame(columns=columns)

    active_users = set()
    for db1 in vm_users:
        logvm = [line for line in tail("/var/log/xray/access.log") if f"email: {db1}" in line]

        for line in logvm:
            parts = line.split()
            if len(parts) >= 7:
                ina, inu, anu = parts[6], parts[1], parts[2]
                enu = re.sub(r"tcp://", "", anu).split(".")[0:3]
                enu = ".".join(enu)

                now = tim2sec(datetime.now().strftime("%H:%M:%S"))
                client = tim2sec(inu)
                nowt = now - client

                if nowt < 40 and (ina, enu) not in active_users:
                    active_users.add((ina, enu))

    # Procesar usuarios activos y agregarlos al DataFrame
    for vmuser in vm_users:
        vm_count = sum(1 for user in active_users if user[0] == vmuser)
        if vm_count > 0:
            try:
                with open(f"/etc/limit/vmess/{vmuser}", "r") as usage_file:
                    byt = int(usage_file.read().strip())
                gb = convert(byt)

                with open(f"/etc/vmess/{vmuser}", "r") as limit_file:
                    lim = int(limit_file.read().strip())
                lim2 = convert(lim)

                new_row = pd.DataFrame([[vmuser, vm_count, gb, lim2]], columns=columns)
                df = pd.concat([df, new_row], ignore_index=True)
            except FileNotFoundError:
                pass

    # Si no hay usuarios activos, agregar una fila informativa
    if df.empty:
        df = pd.DataFrame([["[bold red]No hay usuarios VMESS activos.[/bold red]", "", "", ""]], columns=columns)

    # Crear una tabla de Rich a partir del DataFrame
    table = Table(title="Usuarios VMESS Activos", box=SIMPLE, show_lines=True)
    for column in df.columns:
        table.add_column(column, justify="center")

    for _, row in df.iterrows():
        table.add_row(*row)

    # Crear un panel con la tabla
    panel = Panel(table, title="[bold cyan]• VMESS USER ONLINE •[/bold cyan]", box=SIMPLE)
    return panel

# Variable global para almacenar el panel actual
panel = None

# Hilo para actualizar datos en segundo plano
def update_data():
    global panel
    while True:
        panel = cek_vmess()
        time.sleep(2)

# Ejecución continua en tiempo real
if __name__ == "__main__":
    # Iniciar el hilo de actualización de datos
    threading.Thread(target=update_data, daemon=True).start()

    try:
        with Live(console=console, refresh_per_second=4) as live:
            while True:
                if panel:
                    live.update(panel)
                time.sleep(0.5)  # jdj más rápidamente
    except KeyboardInterrupt:
        console.print("\n[bold yellow]Deteniendo el monitoreo...[/bold yellow]")
