#!/usr/bin/python3
import os
import re
import pandas as pd
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.box import SIMPLE
from rich.style import Style
from datetime import datetime
import time

# Inicializar Rich Console
console = Console()

# Función tim2sec (conversión de tiempo a segundos)
def tim2sec(time_str):
    parts = list(map(int, time_str.split(":")))
    seconds = 0
    for i, part in enumerate(reversed(parts)):
        seconds += part * (60 ** i)
    return seconds

# Función convert (conversión de bytes a KB, MB, GB)
def convert(bytes):
    if bytes < 1024:
        return f"{bytes} B"
    elif bytes < 1048576:
        return f"{(bytes + 1023) // 1024} KB"
    elif bytes < 1073741824:
        return f"{(bytes + 1048575) // 1048576} MB"
    else:
        return f"{(bytes + 1073741823) // 1073741824} GB"

# Función para obtener estilo dinámico
def get_user_style(usage, limit):
    if usage >= limit:
        return Style(color="red", bold=True)
    elif usage >= limit * 0.8:  # 80% del límite
        return Style(color="yellow", bold=True)
    else:
        return Style(color="green", bold=False)

# Función para cargar usuarios desde el archivo de configuración
def load_vm_users():
    with open("/etc/xray/config.json", "r") as config_file:
        lines = config_file.readlines()
    vm_users = [re.search(r"^#vmg\s+(\S+)", line).group(1) for line in lines if re.search(r"^#vmg\s+(\S+)", line)]
    return pd.DataFrame(vm_users, columns=["username"])

# Función para calcular el uso de datos
def calculate_usage(vm_users):
    usage_data = []
    for user in vm_users["username"]:
        try:
            with open(f"/etc/limit/vmess/{user}", "r") as usage_file:
                used_bytes = int(usage_file.read().strip())
            with open(f"/etc/vmess/{user}", "r") as limit_file:
                limit_bytes = int(limit_file.read().strip())
            usage_data.append({
                "username": user,
                "used": used_bytes,
                "limit": limit_bytes
            })
        except FileNotFoundError:
            pass
    return pd.DataFrame(usage_data)

# Función para contar conexiones activas (como en el código original)
def count_active_connections(vm_users):
    active_users = set()
    for user in vm_users["username"]:
        with open("/var/log/xray/access.log", "r") as log_file:
            logvm = [line for line in log_file if f"email: {user}" in line][-100:]
        
        for line in logvm:
            parts = line.split()
            if len(parts) >= 7:
                ina, inu, anu = parts[6], parts[1], parts[2]
                enu = re.sub(r"tcp://", "", anu).split(".")[0:3]
                enu = ".".join(enu)

                now = tim2sec(datetime.now().strftime("%H:%M:%S"))
                client = tim2sec(inu)
                nowt = now - client

                if nowt < 40 and (ina, enu) not in active_users:
                    active_users.add((ina, enu))

    # Contar conexiones por usuario
    connection_counts = {}
    for user, _ in active_users:
        connection_counts[user] = connection_counts.get(user, 0) + 1

    return connection_counts

# Función principal para monitorear usuarios VMESS activos
def cek_vmess():
    # Mostrar encabezado bonito (solo una vez al inicio)
    console.print(Panel("[bold cyan]• VMESS USER ONLINE •[/bold cyan]", style="cyan", box=SIMPLE))

    while True:
        # Cargar usuarios, uso de datos y conexiones activas
        vm_users = load_vm_users()
        usage = calculate_usage(vm_users)
        active_connections = count_active_connections(vm_users)

        # Filtrar solo usuarios activos (con al menos una conexión)
        active_users = usage[usage["username"].isin(active_connections.keys())]

        # Crear tabla para mostrar usuarios activos
        table = Table(title="Usuarios VMESS Activos", box=SIMPLE, show_lines=True)
        table.add_column("Usuario", style="cyan", justify="center")
        table.add_column("Conexiones Activas", style="magenta", justify="center")
        table.add_column("Uso de Datos", style="green", justify="center")
        table.add_column("Límite", style="yellow", justify="center")

        # Rellenar tabla con usuarios activos
        for _, row in active_users.iterrows():
            username = row["username"]
            connections = active_connections.get(username, 0)
            used = convert(row.get("used", 0))
            limit = convert(row.get("limit", 0))

            style = get_user_style(row.get("used", 0), row.get("limit", 0))
            table.add_row(username, str(connections), used, limit, style=style)

        # Imprimir la tabla (sin limpiar la pantalla)
        console.clear()  # Limpia solo la tabla anterior
        console.print(table)

        # Esperar antes de la próxima actualización
        time.sleep(2)

# Ejecución continua en tiempo real
if __name__ == "__main__":
    try:
        cek_vmess()
    except KeyboardInterrupt:
        console.print("\n[bold yellow]Deteniendo el monitoreo...[/bold yellow]")
