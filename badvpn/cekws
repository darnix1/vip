#!/usr/bin/python3
import os
import re
import pandas as pd
from rich.console import Console
from rich.table import Table
from rich.panel import Panel
from rich.box import SIMPLE
from rich.style import Style
from rich.progress import BarColumn, Progress
from datetime import datetime
import time

# Inicializar Rich Console
console = Console()

# Función tim2sec (conversión de tiempo a segundos)
def tim2sec(time_str):
    parts = list(map(int, time_str.split(":")))
    seconds = 0
    for i, part in enumerate(reversed(parts)):
        seconds += part * (60 ** i)
    return seconds

# Función convert (conversión de bytes a KB, MB, GB)
def convert(bytes):
    if bytes < 1024:
        return f"{bytes} B"
    elif bytes < 1048576:
        return f"{(bytes + 1023) // 1024} KB"
    elif bytes < 1073741824:
        return f"{(bytes + 1048575) // 1048576} MB"
    else:
        return f"{(bytes + 1073741823) // 1073741824} GB"

# Función para obtener estilo dinámico
def get_user_style(usage, limit):
    if usage >= limit:
        return Style(color="red", bold=True)
    elif usage >= limit * 0.8:  # 80% del límite
        return Style(color="yellow", bold=True)
    else:
        return Style(color="green", bold=False)

# Función para mostrar un gráfico de barras de uso
def display_usage_bar(usage, limit):
    progress = Progress(
        BarColumn(bar_width=30),
        "{task.completed}/{task.total}",
    )
    with progress:
        task_id = progress.add_task("[cyan]Uso", total=limit, completed=usage)
        progress.update(task_id, completed=usage)
    return progress

# Función para cargar usuarios desde el archivo de configuración
def load_vm_users():
    with open("/etc/xray/config.json", "r") as config_file:
        lines = config_file.readlines()
    vm_users = [re.search(r"^#vmg\s+(\S+)", line).group(1) for line in lines if re.search(r"^#vmg\s+(\S+)", line)]
    return pd.DataFrame(vm_users, columns=["username"])

# Función para cargar logs en un DataFrame
def load_logs(vm_users):
    logs = []
    with open("/var/log/xray/access.log", "r") as log_file:
        for line in log_file:
            parts = line.split()
            if len(parts) >= 7:
                username = parts[6]
                if username in vm_users["username"].values:
                    logs.append({
                        "username": username,
                        "ip": parts[2],
                        "timestamp": parts[1]
                    })
    return pd.DataFrame(logs)

# Función para calcular el uso de datos
def calculate_usage(vm_users):
    usage_data = []
    for user in vm_users["username"]:
        try:
            with open(f"/etc/limit/vmess/{user}", "r") as usage_file:
                used_bytes = int(usage_file.read().strip())
            with open(f"/etc/vmess/{user}", "r") as limit_file:
                limit_bytes = int(limit_file.read().strip())
            usage_data.append({
                "username": user,
                "used": used_bytes,
                "limit": limit_bytes
            })
        except FileNotFoundError:
            pass
    return pd.DataFrame(usage_data)

# Función principal para monitorear usuarios VMESS
def cek_vmess():
    # Limpiar pantalla
    os.system("clear")

    # Mostrar encabezado bonito
    console.print(Panel("[bold cyan]• VMESS USER ONLINE •[/bold cyan]", style="cyan", box=SIMPLE))

    # Cargar usuarios y logs
    vm_users = load_vm_users()
    logs = load_logs(vm_users)
    usage = calculate_usage(vm_users)

    # Crear tabla para mostrar usuarios activos
    table = Table(title="Usuarios VMESS Activos", box=SIMPLE, show_lines=True)
    table.add_column("Usuario", style="cyan", justify="center")
    table.add_column("IP Login", style="magenta", justify="center")
    table.add_column("Uso de Datos", style="green", justify="center")
    table.add_column("Límite", style="yellow", justify="center")
    table.add_column("Estado", style="white", justify="center")

    # Combinar datos
    merged_data = pd.merge(vm_users, usage, on="username", how="left")
    merged_data = pd.merge(merged_data, logs.groupby("username").size().reset_index(name="count"), on="username", how="left")

    # Rellenar tabla
    for _, row in merged_data.iterrows():
        username = row["username"]
        ip = row.get("ip", "N/A")
        used = convert(row.get("used", 0))
        limit = convert(row.get("limit", 0))
        count = row.get("count", 0)
        status = "Activo" if count > 0 else "Inactivo"

        style = get_user_style(row.get("used", 0), row.get("limit", 0))
        table.add_row(username, ip, used, limit, status, style=style)

    # Mostrar tabla
    if not merged_data.empty:
        console.print(table)
    else:
        console.print("[bold red]No hay usuarios VMESS activos.[/bold red]")

# Ejecución continua en tiempo real
if __name__ == "__main__":
    try:
        while True:
            cek_vmess()
            time.sleep(2)  # Espera 2 segundos antes de actualizar
    except KeyboardInterrupt:
        console.print("\n[bold yellow]Deteniendo el monitoreo...[/bold yellow]")
