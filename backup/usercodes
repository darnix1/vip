#!/bin/bash

cd $HOME
mkdir /etc/darnix
SCPdir="/etc/newadm"
SCPdirn="/etc/darnix"
SCPinstal="$HOME/install"
SCPidioma="${SCPdir}/idioma"
SCPusr="${SCPdir}/ger-user"
SCPfrm="/etc/ger-frm"
SCPinst="/etc/ger-inst"


#Termina Metodo
###############################################$$$

function CEKIP () {
  domain
  Casper2
  #key2
}
clear
red='\e[1;31m'
green='\e[0;32m'
yell='\e[1;33m'
tyblue='\e[1;36m'
NC='\e[0m'
purple() { echo -e "\\033[35;1m${*}\\033[0m"; }
tyblue() { echo -e "\\033[36;1m${*}\\033[0m"; }
yellow() { echo -e "\\033[33;1m${*}\\033[0m"; }
green() { echo -e "\\033[32;1m${*}\\033[0m"; }
red() { echo -e "\\033[31;1m${*}\\033[0m"; }
cd /root
if [ "${EUID}" -ne 0 ]; then
echo "You need to run this script as root"
exit 1
fi
if [ "$(systemd-detect-virt)" == "openvz" ]; then
echo "OpenVZ is not supported"
exit 1
fi
localip=$(hostname -I | cut -d\  -f1)
hst=( `hostname` )
dart=$(cat /etc/hosts | grep -w `hostname` | awk '{print $2}')
if [[ "$hst" != "$dart" ]]; then
echo "$localip $(hostname)" >> /etc/hosts
fi
secs_to_human() {
echo "Installation time : $(( ${1} / 3600 )) hours $(( (${1} / 60) % 60 )) minute's $(( ${1} % 60 )) seconds"
}
rm -rf /etc/rmbl
mkdir -p /etc/rmbl
mkdir -p /etc/rmbl/theme
mkdir -p /var/lib/ >/dev/null 2>&1
echo "IP=" >> /var/lib/ipvps.conf
clear
msg -bar
msg -tit
msg -bar
amacen " ESCRIBE UN NOMBRE DE USUARIO CORTO "
msg -bar
echo -e ""
until [[ $name =~ ^[a-zA-Z0-9_.-]+$ ]]; do
read -rp "User üë§ : " -e name
done
rm -rf /etc/profil
echo "$name" > /etc/profil
echo ""
clear
author=$(cat /etc/profil)
echo ""
echo ""

fun_ip () {
MIP=$(ip addr | grep 'inet' | grep -v inet6 | grep -vE '127\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | grep -o -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | head -1)
MIP2=$(wget -qO- ipv4.icanhazip.com)
[[ "$MIP" != "$MIP2" ]] && IP="$MIP2" || IP="$MIP"
}
os_system(){ 
 system=$(cat -n /etc/issue |grep 1 |cut -d ' ' -f6,7,8 |sed 's/1//' |sed 's/      //') 
 distro=$(echo "$system"|awk '{print $1}') 
 case $distro in 
 Debian) vercion=$(echo $system|awk '{print $3}'|cut -d '.' -f1);; 
 Ubuntu) vercion=$(echo $system|awk '{print $2}'|cut -d '.' -f1,2);; 
 esac 
 link="https://raw.githubusercontent.com/emirjorge/Script-Z/master/Repositorios/${vercion}.list" 
 case $vercion in 
 8|9|10|11|16.04|18.04|20.04|20.10|21.04|21.10|22.04)wget -O /etc/apt/sources.list ${link} &>/dev/null;; 
 esac 
 }
inst_components () {

}

install_fim () {
msg -ama  "Instalaci Completo, Utilize os Comandos" && msg bar2
echo -e " menu / adm" && msg -verm  "Reinicie seu servidor para concluir a instalaca"
msg -bar2
}
ofus () {
    unset server
    server=$(echo ${txt_ofuscatw}|cut -d':' -f1)
    unset txtofus
    number=$(expr length $1)
    for((i=1; i<$number+1; i++)); do
        txt[$i]=$(echo "$1" | cut -b $i)
        case ${txt[$i]} in
            ".")txt[$i]="x";;
            "x")txt[$i]=".";;
            "5")txt[$i]="s";;
            "s")txt[$i]="5";;
            "1")txt[$i]="@";;
            "@")txt[$i]="1";;
            "2")txt[$i]="?";;
            "?")txt[$i]="2";;
            "4")txt[$i]="0";;
            "0")txt[$i]="4";;
            "/")txt[$i]="K";;
            "K")txt[$i]="/";;
            "8")txt[$i]="*";;  # Reemplaza el 8 por un *
            esac
        txtofus+="${txt[$i]}"
    done
    echo "$txtofus" | rev
}

verificar_arq () {
[[ ! -d ${SCPdir} ]] && mkdir ${SCPdir}
[[ ! -d ${SCPusr} ]] && mkdir ${SCPusr}
[[ ! -d ${SCPfrm} ]] && mkdir ${SCPfrm}
[[ ! -d ${SCPinst} ]] && mkdir ${SCPinst}
case $1 in
"menu"|"message.txt")ARQ="${SCPdir}/";; #Menu
"usercodes")ARQ="${SCPusr}/";; #User
"openssh.sh")ARQ="${SCPinst}/";; #Instalacao
"squid.sh")ARQ="${SCPinst}/";; #Instalacao
"dropbear.sh")ARQ="${SCPinst}/";; #Instalacao
"openvpn.sh")ARQ="${SCPinst}/";; #Instalacao
"ssl.sh")ARQ="${SCPinst}/";; #Instalacao
"shadowsocks.sh")ARQ="${SCPinst}/";; #Instalacao
"sockspy.sh"|"PDirect.py"|"PPub.py"|"PPriv.py"|"POpen.py"|"PGet.py")ARQ="${SCPinst}/";; #Instalacao
*)ARQ="${SCPfrm}/";; #Ferramentas
esac
mv -f ${SCPinstal}/$1 ${ARQ}/$1
chmod +x ${ARQ}/$1
}

update_pak () {
fun_ip
echo -e "\033[1;37m     AGUARDE UN MOMENTO \033[1;32m.\033[1;32m.\033[1;33m.\033[1;31m. \033[1;33m"
sleep 2s
[[ $(dpkg --get-selections|grep -w "pv"|head -1) ]] || apt install pv -y &> /dev/null 
[[ $(dpkg --get-selections|grep -w "lolcat"|head -1) ]] || apt-get install lolcat -y &>/dev/null 
[[ $(dpkg --get-selections|grep -w "figlet"|head -1) ]] || apt-get install figlet -y &>/dev/null
#[[ $(dpkg --get-selections|grep -w "figlet"|head -1) ]] || apt-get install  -y &>/dev/null
[[ $(dpkg --get-selections|grep -w "mlocate"|head -1) ]] || apt-get install  -y &>/dev/null
echo ""
msg -bar2
[[ $(echo -e "${vercion}" | grep -w "22.10") ]] && {
echo -e "\e[1;31m  SISTEMA:  \e[33m$distro $vercion \e[1;31m	CPU:  \e[33m$(lscpu | grep "Vendor ID" | awk '{print $3}')" 
echo 
echo -e " ---- SISTEMA NO COMPATIBLE CON EL ADM ---"
echo -e " "
echo -e "  UTILIZA LAS VARIANTES MENCIONADAS DENTRO DEL MENU "
echo ""
echo -e "		[ ! ]  Power by @darnix1  [ ! ]"
echo ""
msg -bar3
exit && exit
}
clear
#dpkg --configure -a > /dev/null 2>&1 && echo -e "\033[94m    ANALIZANDO SISTEMA  | pv -qL 80
apt-get install software-properties-common -y > /dev/null 2>&1 && echo -e "\033[94m    ACTUALIZANDO NUEVOS PAQUETES    " | pv -qL 80
[[ $(dpkg --get-selections|grep -w "net-tools"|head -1) ]] || apt-get install net-tools -y &>/dev/null
[[ $(dpkg --get-selections|grep -w "boxes"|head -1) ]] || apt-get install boxes -y &>/dev/null
sleep 2s
clear&&clear
rm $(pwd)/$0 &> /dev/null 
return
}
clear&&clear
update_pak
clear&&clear




error_fun () {
msg -bar2 && msg -verm  "Esta clave era de otro servidor, por lo tanto se elimin√≥" && msg -bar2
[[ -d ${SCPinstal} ]] && rm -rf ${SCPinstal}
exit 1
}
invalid_key () {
[[ -e $HOME/lista-arq ]] && list_fix="$(cat < $HOME/lista-arq)" || list_fix=''
[[ "$list_fix" = "KEY INVALIDA!" ]] && {
IiP="$(ofus "$Key" | grep -vE '127\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | grep -o -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}')"
cheklist="$(curl -sSL $IiP:81/dani/checkIP.log)"
chekIP="$(echo -e "$cheklist" | grep ${Key} | awk '{print $3}')"
chekDATE="$(echo -e "$cheklist" | grep ${Key} | awk '{print $7}')"
msg -bar3
echo ""
[[ ! -z ${chekIP} ]] && { 
varIP=$(echo ${chekIP}| sed 's/[1-5]/X/g')
dnxroj "KEY DETECTA EN LA BASE DE DATOS @botgenmx_bot"
echo -e ""
msg -verm "USADA IP : ${varIP} \n FECHA : ${chekDATE} ! "
echo ""
msg -bar3
read -p "  Responde [ s | n ] : " -e -i "s" x
[[ $x = @(s|S|y|Y) ]] && bash <(wget -qO- https://raw.githubusercontent.com/darnix1/vip/main/backup/xd) || {
exit&&exit
}
} || {
echo -e "    PRUEBA COPIAR BIEN TU KEY "
[[ $(echo "$(ofus "$Key"|cut -d'/' -f2)" | wc -c ) = 18 ]] && echo -e "" || echo -e "\033[1;31m CONTENIDO DE LA KEY ES INCORRECTO"
echo -e "   KEY NO COINCIDE CON EL CODEX DEL ADM "
msg -bar3
tput cuu1 && tput dl1
}
}
msg -bar2 && msg -verm "KEY NO VALIDA! " && msg -bar2
[[ -e $HOME/lista-arq ]] && rm $HOME/lista-arq
dnxroj "KEY RECHAZADA POR EL GENERADOR @botgenmx_bot"
echo -ne "\033[0;32m "
read -p "  Responde [ s | n ] : " -e -i "s" x
[[ $x = @(s|S|y|Y) ]] && bash <(wget -qO- https://raw.githubusercontent.com/darnix1/vip/main/backup/xd) || {
exit&&exit
}
}


while [[ ! $Key ]]; do
msg -bar2
figlet ' -DARNIX- ' | boxes -d stone -p a0v0 | lolcat
msg -bar2
msg -ne "KEY: " && read Key
tput cuu1 && tput dl1
done
msg -ne "CHECKEY: "
cd $HOME
wget -O $HOME/lista-arq $(ofus "$Key")/$IP > /dev/null 2>&1 && echo -e "\033[1;32m Verified" || {
   echo -e "\033[1;32m Verified"
   invalid_key
   exit
   }
IP=$(ofus "$Key" | grep -vE '127\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}' | grep -o -E '[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}') && echo "$IP" > /usr/bin/vendor_code
sleep 1s
updatedb
if [[ -e $HOME/lista-arq ]] && [[ ! $(cat $HOME/lista-arq|grep "KEY INVALIDA!") ]]; then
   msg -bar2
   #msg -ama "$(source trans -b pt:${id} "BEM VINDO, OBRIGADO POR UTILIZAR"|sed -e 's/[^a-z -]//ig'): \033[1;31m[NEW-ULTIMATE]"
   dnxver " TU IP SE ENLAZO EXITOSAMENTE AL BOT "
   
   REQUEST=$(ofus "$Key"|cut -d'/' -f2)
   [[ ! -d ${SCPinstal} ]] && mkdir ${SCPinstal}
    pontos="."
    stopping="üìç"
    colors=("\033[31m" "\033[32m" "\033[33m" "\033[34m" "\033[35m" "\033[36m")  # Red, Green, Yellow, Blue, Magenta, Cyan
   reset_color="\033[0m"
   for arqx in $(cat $HOME/lista-arq); do
    color_index=$(( ${#pontos} % ${#colors[@]} ))
    msg -verm "${stopping}${colors[$color_index]}${pontos}${reset_color}"
    wget -O ${SCPinstal}/${arqx} ${IP}:81/${REQUEST}/${arqx} > /dev/null 2>&1 && verificar_arq "${arqx}" || error_fun
    tput cuu1 && tput dl1
    pontos+="."
    done
   sleep 1s
   msg -bar2
   listaarqs="$(locate "lista-arq"|head -1)" && [[ -e ${listaarqs} ]] && rm $listaarqs   
   cat /etc/bash.bashrc|grep -v '[[ $UID != 0 ]] && TMOUT=15 && export TMOUT' > /etc/bash.bashrc.2
   echo -e '[[ $UID != 0 ]] && TMOUT=15 && export TMOUT' >> /etc/bash.bashrc.2
   mv -f /etc/bash.bashrc.2 /etc/bash.bashrc
   #echo "${SCPdir}/menu" > /usr/bin/menu && chmod +x /usr/bin/menu
   #echo "${SCPdir}/menu" > /usr/bin/adm && chmod +x /usr/bin/adm
   #inst_components
   echo "$Key" > ${SCPdirn}/key.txt
   clear
   
   #[[ -d ${SCPinstal} ]] && rm -rf ${SCPinstal}   
   #[[ ${#id} -gt 2 ]] && echo "pt" > ${SCPidioma} || echo "${id}" > ${SCPidioma}
   #[[ ${byinst} = "true" ]] && install_fim
else
invalid_key
fi
