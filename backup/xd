#!/bin/bash

module="$(pwd)/module"
[ -e "${module}" ] && rm -f "${module}"
wget -q -O "${module}" "https://raw.githubusercontent.com/darnix1/Premium/main/menu/darnix"
[ ! -e "${module}" ] && exit
chmod +x "${module}" 2>/dev/null
source "${module}"

on_off_res(){
	if [[ $(cat $v2rdir/conf | grep "autBackup" | cut -d " " -f2) = "0" ]]; then
		echo -e "\033[0;31m[off]"
	else
		echo -e "\033[1;92m[on]"
	fi
 }

blanco(){
	[[ !  $2 = 0 ]] && {
		echo -e "\033[1;37m$1\033[0m"
	} || {
		echo -ne " \033[1;37m$1:\033[0m "
	}
}

verde(){
	[[ !  $2 = 0 ]] && {
		echo -e "\033[1;32m$1\033[0m"
	} || {
		echo -ne " \033[1;32m$1:\033[0m "
	}
}

rojo(){
	[[ !  $2 = 0 ]] && {
		echo -e "\033[1;31m$1\033[0m"
	} || {
		echo -ne " \033[1;31m$1:\033[0m "
	}
}

col(){

	nom=$(printf '%-55s' "\033[0;92m${1} \033[0;31m>> \033[1;37m${2}")
	echo -e "	$nom\033[0;31m${3}   \033[0;92m${4}\033[0m"
}

col2(){

	echo -e " \033[1;91m$1\033[0m \033[1;37m$2\033[0m"
}

vacio(){

	blanco "\n no se puede ingresar campos vacios..."
}

cancelar(){

	echo -e "\n \033[3;49;31minstalacion cancelada...\033[0m"
}

continuar(){

	echo -e " \033[3;49;32mEnter para continuar...\033[0m"
}



path(){
	while :
	do
	net=$(jq '.inbounds[].streamSettings.network' $config)
	[[ $net = '"grpc"' ]] && path=$(jq '.inbounds[].streamSettings.grpcSettings.serviceName'  $config) || path=$(jq '.inbounds[].streamSettings.wsSettings.path' $config)
	clear
	msg -bar3
	blanco "       configuracion Path"
	msg -bar3
	col2 "path:" "$path"
	msg -bar3
	col "0)" "VOLVER"
	msg -bar3
	blanco "NUEVO Path" 0
	read opcion
	[[ -z $opcion ]] && vacio && sleep 0.3 && break
	[[ $opcion = 0 ]] && break
	mv $config $temp
	[[ $net = '"grpc"' ]] && echo "cat $temp | jq '.inbounds[].streamSettings.grpcSettings += {serviceName :\"$opcion\"}' >> $config" | bash || echo "cat $temp | jq '.inbounds[].streamSettings.wsSettings += {path:\"$opcion\"}' >> $config" | bash
#	echo "cat $temp | jq '.inbounds[].streamSettings.grpcSettings += {serviceName :\"$opcion\"}' >> $config" | bash
	chmod 777 $config
	rm $temp
	clear
	msg -bar3
	blanco "Nuevo path fijado"
	msg -bar3
	sleep 0.2
	systemctl restart xray
	done
}



settings(){
	while :
	do
	clear
	msg -bar3
	blanco "	  Ajustes e instalacion v2ray"
	msg -bar3
	col "1)" "CAMBIAR DOMINIO / IP"
	col "2)" "CAMBIAR PUERTO "
	col "3)" "CAMBIAR AlterId"
	col "4)" "CAMBIAR HOST"
	col "5)" "CAMBIAR PACH"
	msg -bar3
	col "6)" "AÑADIR CRT (script)"
	col "7)" "AÑADIR CRT V2RAY NATIVO"
	col "8)" "AÑADIR CERTIFICADO MANUAL"
	msg -bar3
	col "9)" "CAMBIAR PROTOCOLO V2RAY"
	col "10)" "ENTRAR A V2RAY ORIGINAL"
	col "11)" "RESTABLECER CONFIGURACION"
	msg -bar3
	col "12)" "BBR nativo del sistema"
	col "13)" "INSTALL/REINSTALL V2RAY/XRAY"
	msg -bar3
	col "14)" "Conf. COPIAS DE SEGURIDAD"
	msg -bar3
	#col "15)" "HABILITAR MODULO XRAY ( V2ray )"
	#msg -bar3
	col "0)" "REGRESAR"
	msg -bar3
	blanco "opcion" 0
	read opcion

	[[ -z $opcion ]] && vacio && sleep 0.3 && break
	[[ $opcion = 0 ]] && break

	case $opcion in
		1)address;;
		2)port;;
		3)alterid;;
		4)host;;
		5)path;;
		6)domain_check && clear ;;
		7)v2ray_tls;;
		8)crt_man;;
		9)v2ray_stream;;
		10)v2ray_menu;;
		11)restablecer_v2r;;
		12)bbr;;
		13)install;;
		14)backups;;
		15)_xray;;
		*) blanco " solo numeros de 0 a 14" && sleep 0.2;;
	esac
    done
}


main(){
	[[ ! -e $config ]] && {
		clear
		msg -bar3
		blanco " No se encontro ningun archovo de configracion v2ray"
		msg -bar3
		blanco "	  No instalo v2ray o esta usando\n	     una vercion diferente!!!"
		msg -bar3
		echo -e "		\033[4;31mNOTA importante\033[0m"
		echo -e " \033[0;31mSi esta usando una vercion v2ray diferente"
		echo -e " y opta por cuntinuar usando este script."
		echo -e " Este puede; no funcionar correctamente"
		echo -e " y causar problemas en futuras instalaciones.\033[0m"
		msg -bar3
		continuar
		read foo
	}
	while :
	do
		_usor=$(printf '%-8s' "$(free -m | awk 'NR==2{printf "%.2f%%", $3*100/$2 }')")
		_usop=$(printf '%-1s' "$(top -bn1 | awk '/Cpu/ { cpu = "" 100 - $8 "%" }; END { print cpu }')")
		[[ -e /bin/v2r.sh ]] && enrap="\033[1;92m[ON]" || enrap="\033[0;31m[OFF]"
		[[ -e /etc/v2ray/config.json ]] && _v2Reg="$(cat /etc/v2ray/config.json | jq .inbounds[].settings.clients[].email|wc -l)" || _v2Reg=0
		[[ -e /etc/v2ray/config.json.lock ]] && _v2LOCK="$(cat /etc/v2ray/config.json.lock|wc -l)" || _v2LOCK=0
		clear
		title2
		title "   Ram: \033[1;32m$_usor  \033[0;31m<<< \033[1;37mMENU V2RAY \033[0;31m>>>  \033[1;37mCPU: \033[1;32m$_usop"
		col "1)" "CREAR NUEVO USUARIO"
		col "2)" "\033[0;92mRENOVAR USUARIO"
		col "3)" "\033[0;31mREMOVER USUARIO"
		col "4)" "VER DATOS DE USUARIOS \033[1;32m ( ${_v2Reg} )"
		col "5)" "VER USUARIOS CONECTADOS"
		col "b)" "LOCK/UNLOCK USUARIO \033[1;32m ( ${_v2LOCK} )"
		msg -bar3
		col "6)" "\033[1;33m AJUSTES V2RAY $_v2"
		msg -bar3
		col "7)" "\033[1;33mENTRAR CON \033[1;33mv2r.sh $enrap"
		msg -bar3
		col "8)" "\033[1;33mFIXEAR V2RAY ( SOLO USUARIOS )"
		msg -bar3
		col "0)" "SALIR \033[0;31m|| $(blanco "Respaldos a utomaticos") $(on_off_res)"
		msg -bar3
		blanco "opcion" 0
		read opcion

		case $opcion in
			1) add_user;;
			2) renew;;
			3) dell_user;;
			4) view_user;;
			5) usrCONEC ;;
			6) settings;;
			7) enttrada;;
			8) restablecer_v2r;;
			b) _lo_un;;
			0) break;;
			*) blanco "\n selecione una opcion del 0 al 8" && sleep 0.1;;
		esac
	done
}

[[ $1 = "autoDel" ]] && {
	chekKEY &> /dev/null 2>&1
	autoDel
} || {
	chekKEY &> /dev/null 2>&1
	autoDel
	main
}
