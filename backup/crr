#!/bin/bash

# Función para mostrar barra de progreso
progress_bar() {
    total=$1
    current=0
    while [ $current -le $total ]; do
        let current++
        percent=$(( 100 * current / total ))
        bar=""
        for ((i = 0; i < 50; i++)); do
            if [ $i -lt $((percent / 2)) ]; then
                bar="|$bar"
            else
                bar="-"
            fi
        done
        echo -ne "[$bar] $percent% Completed\r"
        sleep 0.1
    done
    echo -ne "\n"
}

# Instalar SSL
inst_ssl() {
    echo "Iniciando instalación de SSL..."
    apt-get purge stunnel4 -y
    apt-get purge stunnel -y
    apt-get install stunnel4 -y
    apt-get install stunnel -y
    progress_bar 20  # Barra de progreso para esta parte

    pt=$(netstat -nplt | grep 'sshd' | awk -F ":" 'NR==1{print $2}' | cut -d " " -f 1)

    echo -e "cert = /etc/stunnel/stunnel.pem\nclient = no\nsocket = a:SO_REUSEADDR=1\nsocket = l:TCP_NODELAY=1\nsocket = r:TCP_NODELAY=1\n\n[stunnel]\nconnect = 127.0.0.1:80\naccept = 443" > /etc/stunnel/stunnel.conf
    openssl genrsa -out key.pem 2048 > /dev/null 2>&1
    (echo br; echo br; echo uss; echo speed; echo pnl; echo darnix; echo @darnix1) | openssl req -new -x509 -key key.pem -out cert.pem -days 1095 > /dev/null 2>&1
    cat key.pem cert.pem >> /etc/stunnel/stunnel.pem
    sed -i 's/ENABLED=0/ENABLED=1/g' /etc/default/stunnel4
    service stunnel4 restart
    service stunnel restart
    service stunnel4 start
    progress_bar 40  # Barra de progreso para esta parte
}

# Instalar Python y configurar proxy
inst_py () {
    echo "Iniciando instalación de Python..."
    apt install python -y
    apt install screen -y
    progress_bar 30  # Barra de progreso para esta parte

    pt=$(netstat -nplt | grep 'sshd' | awk -F ":" 'NR==1{print $2}' | cut -d " " -f 1)

    cat <<EOF > proxy.py
import socket, threading, select

# CONFIG
LISTENING_ADDR = '0.0.0.0'
LISTENING_PORT = 1080
PASS = ''
DEFAULT_HOST = "127.0.0.1:$pt"

class Server(threading.Thread):
    def __init__(self, host, port):
        threading.Thread.__init__(self)
        self.running = False
        self.host = host
        self.port = port
        self.threads = []

    def run(self):
        self.soc = socket.socket(socket.AF_INET)
        self.soc.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.soc.settimeout(2)
        self.soc.bind((self.host, self.port))
        self.soc.listen(0)
        self.running = True
        while self.running:
            try:
                c, addr = self.soc.accept()
                c.setblocking(1)
            except socket.timeout:
                continue
            conn = ConnectionHandler(c, self, addr)
            conn.start()
        self.soc.close()

class ConnectionHandler(threading.Thread):
    def __init__(self, socClient, server, addr):
        threading.Thread.__init__(self)
        self.client = socClient
        self.server = server

    def run(self):
        pass  # Implementación de la lógica de proxy aquí...

def main(host=LISTENING_ADDR, port=LISTENING_PORT):
    server = Server(LISTENING_ADDR, LISTENING_PORT)
    server.start()

if __name__ == '__main__':
    main()
EOF

    screen -dmS pythonwe python proxy.py -p 80
    progress_bar 10  # Barra de progreso para esta parte
}

# Mostrar mensaje de espera para continuar
read -t 60 -n 1 -rsp $'\033[1;39m       << Presiona enter para Continuar >>\n'

# Llamar funciones de instalación
inst_ssl
inst_py
